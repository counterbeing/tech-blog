<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bits and Blocks</title>
    <link>https://www.corylogan.com/bits/index.xml</link>
    <description>Recent content on Bits and Blocks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Dec 2016 18:30:08 -0800</lastBuildDate>
    <atom:link href="https://www.corylogan.com/bits/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why Choose Vim</title>
      <link>https://www.corylogan.com/bits/articles/why_choose_vim/</link>
      <pubDate>Tue, 13 Dec 2016 18:30:08 -0800</pubDate>
      
      <guid>https://www.corylogan.com/bits/articles/why_choose_vim/</guid>
      <description>

&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;

&lt;p&gt;Choosing a text editor is a very personal decision. You grow with your editor, as your editor grows with you. As I use my text editor more and more over the years, I&amp;rsquo;m constantly constantly learning new techniques for working more efficiently. Some of them stick, others are forgotten. I find that sequences and shortcuts that I most use stay. But just as importantly VIM accommodates my changing needs through configuration, plugin, or otherwise.&lt;/p&gt;

&lt;p&gt;Most of all, you need a good editor, that you are familiar with.&lt;/p&gt;

&lt;h2 id=&#34;why-vim-works-for-me&#34;&gt;Why Vim Works For Me&lt;/h2&gt;

&lt;p&gt;Different jobs require different tools&lt;/p&gt;

&lt;p&gt;Vim also has it&amp;rsquo;s own set of advantages. It&amp;rsquo;s very fast at large search and replace operations. It&amp;rsquo;s infinitely extensible, with plugins that integrate with git, automatically format tables, check syntax. It can be operated entirely over SSH. It&amp;rsquo;s easily customized. It&amp;rsquo;s ubiquitous. It&amp;rsquo;s free. It has a great community of people.&lt;/p&gt;

&lt;h2 id=&#34;a-few-caveats&#34;&gt;A Few Caveats&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Steep learning curve.&lt;/li&gt;
&lt;li&gt;Customization is almost requisite&lt;/li&gt;
&lt;li&gt;Not everyone knows how to use VIM, this can be and impediment to working with someone else at your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I actually keep a couple of GUI editors around as I find that have uses for them. There are some tasks that mice are just really good at. TextWrangler works well with really large files. Sometimes I might just it to look at a gigantic CSV alongside the code that&amp;rsquo;s being used to manipulate it.&lt;/p&gt;

&lt;h2 id=&#34;better-faster-stronger&#34;&gt;Better, Faster, Stronger&lt;/h2&gt;

&lt;p&gt;Vim is brilliant in how extensible and malleable it is.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Single Singleton in Ruby</title>
      <link>https://www.corylogan.com/bits/articles/a_single_singleton_in_ruby/</link>
      <pubDate>Tue, 13 Dec 2016 18:22:26 -0800</pubDate>
      
      <guid>https://www.corylogan.com/bits/articles/a_single_singleton_in_ruby/</guid>
      <description>

&lt;h2 id=&#34;the-singleton-design-pattern&#34;&gt;The singleton design pattern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m relatively new the the concept of the singleton, even though I&amp;rsquo;ve been programming for a number of years. I&amp;rsquo;ve run into several instances in which I new that this was exactly what I needed, but did not have a name for it. Here, I&amp;rsquo;m going to try to explain it to myself a year ago. There are a few questions I&amp;rsquo;ll try to address.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do I care?&lt;/li&gt;
&lt;li&gt;What does it do?&lt;/li&gt;
&lt;li&gt;How should I implement it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-do-i-care&#34;&gt;Why do I care?&lt;/h2&gt;

&lt;p&gt;A lot has been written on design patters, and by people with a lot more experience than myself. I&amp;rsquo;d recommend picking up a book on the topic and learning a bit more if it&amp;rsquo;s a new concept to you. Each one of these patterns is a tool that you can use to solve problems that have been solved over and over again. They can hasten, and solidify your development, as well as give you a way to succinctly communicate big ideas.&lt;/p&gt;

&lt;p&gt;This particular pattern generally comes into play when you need some kind of global object to not only provide a set of methods, but also manage some kind of global state.&lt;/p&gt;

&lt;h2 id=&#34;what-does-it-do&#34;&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll give you a real world example to help make the point. In working on an application that was in charge of sifting through large piles of data, and alerting a person for errors several times a day, I needed a way to keep track of the errors in memory. It also needed to be available to many different classes in the application.&lt;/p&gt;

&lt;p&gt;The singleton fits this almost perfectly.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll admit, there are many cases when it&amp;rsquo;s a poor choice for the pattern to use. Any time you only need state for a little while, or if you need more than a handful of methods on an object.&lt;/p&gt;

&lt;p&gt;In essence, the singleton is for simple objects that are action based, and that you only want one of in the instance of your application.&lt;/p&gt;

&lt;h2 id=&#34;how-should-i-implement-it&#34;&gt;How should I implement it?&lt;/h2&gt;

&lt;p&gt;There are different ways to implement the singleton pattern. Let&amp;rsquo;s first go over an example of the pattern implemented by hand, so that you can see how it works, before we try to hide some of the details. We&amp;rsquo;ll stick with the error logger example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ErrorLogger
  # This prevents the class from being instantiated. With a sigleton, we don&#39;t
  # want more than one instance. That&#39;s pretty much the definition.
  private_class_method :new

  # This class variable will be in charge of storing the global state of our
  # singleton in memory. All of the information will end up here. We&#39;ll access
  # it through another method of our choosing.
  @@log = []

  # Everything inside of this will be declared as a class method.
  class &amp;lt;&amp;lt; self
    def log_an_error(error)
      @@log &amp;lt;&amp;lt; error
    end

    def print_log
      @@log.inspect
    end
  end
end

ErrorLogger.log_an_error(&#39;Server is on fire!&#39;)
ErrorLogger.print_log # =&amp;gt; [&amp;quot;Server is on fire&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other implementations of the singleton, but I prefer to simply have the class expose any methods directly on itself. Some other singletons have the class create a single instance of itself, and all methods are instance methods, and in that case you can use instance variables.&lt;/p&gt;

&lt;p&gt;But, this can be simplified further with the help of ruby&amp;rsquo;s built in &lt;a href=&#34;https://ruby-doc.org/stdlib-2.3.0/libdoc/singleton/rdoc/Singleton.html&#34;&gt;singleton module&lt;/a&gt;. The one gotcha here, is that calling it behaves a little differently. These are now instance methods and must be called on the instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;singleton&#39;

class ErrorLogger
  include Singleton

  def initialize
    @log = []
  end
  def log_an_error(error)
    @log &amp;lt;&amp;lt; error
  end

  def print_log
    @log.inspect
  end
end

error_logger = ErrorLogger.instance
error_logger.log_an_error(&#39;Killing me softly...&#39;)
error_logger.print_log # =&amp;gt; [&amp;quot;Killing me softly...&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my opinion, it doesn&amp;rsquo;t look much better than the first example. But, it does avoid the use of class variables, which is nice.&lt;/p&gt;

&lt;p&gt;I think though, the one that I&amp;rsquo;ll probably reach for next time, is using module methods on a module. I know that this overlooks a few things, like the fact that modules can be mixed into classes, and you don&amp;rsquo;t really want that with a singleton. But, I&amp;rsquo;d say, in all practical terms, just don&amp;rsquo;t do that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module ErrorLogger
  class &amp;lt;&amp;lt; self
    def log
      @log ||= []
    end

    def log_an_error(error)
      log &amp;lt;&amp;lt; error
    end

    def print_log
      log.inspect
    end
  end
end

ErrorLogger.log_an_error(&#39;Whoops!&#39;)
ErrorLogger.print_log # =&amp;gt; [&amp;quot;Whoops!&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other great articles that dive further into the topic. I&amp;rsquo;d really recommend &lt;a href=&#34;http://practicingruby.com/articles/ruby-and-the-singleton-pattern-dont-get-along&#34;&gt;Practicing Ruby&amp;rsquo;s take on the topic&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Mysteries of the Ruby Heredoc</title>
      <link>https://www.corylogan.com/bits/articles/the_mysteries_of_the_ruby_heredoc/</link>
      <pubDate>Fri, 18 Nov 2016 19:28:41 +0200</pubDate>
      
      <guid>https://www.corylogan.com/bits/articles/the_mysteries_of_the_ruby_heredoc/</guid>
      <description>

&lt;p&gt;As of writing this, I&amp;rsquo;m running Ruby version 2.3.0. Not all of this, particularly the stripped heredoc, is available in plain ruby before 2.3.0.&lt;/p&gt;

&lt;h2 id=&#34;heredoc-basics&#34;&gt;Heredoc Basics&lt;/h2&gt;

&lt;p&gt;So, you need a string that&amp;rsquo;s longer than a line, and you&amp;rsquo;re sick of quotes and backslashes? And you might like to retain formatting? You want string interpolation too? Enter, heredoc.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s your basic, run of the mill, heredoc. You&amp;rsquo;ll notice we use the &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; operator, and our safe-word, which we will use to end the heredoc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def print_a_haiku
  haiku = &amp;lt;&amp;lt;-TEXT
ruby is pretty
the formatting perfected
lovely indented
  TEXT
  puts haiku
end

print_a_haiku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That would simply return the text as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ruby is pretty
the formatting perfected
lovely indented
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it&amp;rsquo;s clearly ugly. When you see it in a piece of code you&amp;rsquo;re trying to navigate, it&amp;rsquo;s more than a little disorienting. You could actually indent the text above, but, if you do that the string returned will also have leading spaces. In some cases, leading spaces can break things in unexpected ways.&lt;/p&gt;

&lt;h2 id=&#34;stripped-heredocs&#34;&gt;Stripped Heredocs&lt;/h2&gt;

&lt;p&gt;One thing that drives me nuts, is when I&amp;rsquo;m reading some code that contains heredocs, and suddenly you&amp;rsquo;re all the way unindented. While in many cases this might be an indicator that something is wrong, there are many places I think it&amp;rsquo;s acceptable, and even preferable to have an indented heredoc.&lt;/p&gt;

&lt;p&gt;As of Ruby 2.3, we have a new way to handle this. We declare the heredoc using the &lt;code&gt;&amp;lt;&amp;lt;~&lt;/code&gt; operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def print_a_haiku
  haiku = &amp;lt;&amp;lt;~TEXT
    ruby is pretty
    the formatting perfected
    lovely indented
  TEXT
  puts haiku
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a small thing, but these little niceties really help when trying to internalize a complicated file quickly.&lt;/p&gt;

&lt;h2 id=&#34;the-rails-way&#34;&gt;The Rails Way&lt;/h2&gt;

&lt;p&gt;Long before ruby featured a stripped heredoc, Rails saw the need and implemented their own method. Here is &lt;a href=&#34;https://github.com/rails/rails/blob/b422cda2ebfff4032f4c18271e96ad329c413dcc/activesupport/lib/active_support/core_ext/string/strip.rb#L22&#34;&gt;their implementation&lt;/a&gt;, which was added as an extension of &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class String
  def strip_heredoc
    indent = scan(/^[ \t]*(?=\S)/).min.try(:size) || 0
    gsub(/^[ \t]{#{indent}}/, &#39;&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This counts the minimum number of spaces before all lines of your heredoc, and indents accordingly. You&amp;rsquo;d use it like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts &amp;lt;&amp;lt;-MY_STRING.strip_heredoc
  here is some text
    and indented once here
MY_STRING
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I mention this in part, because I found it useful, and you might find it useful if you&amp;rsquo;re on an earlier version of ruby. If you&amp;rsquo;re 2.3 or later, I would prefer the Ruby implementation.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another reason this is worth looking at. It demonstrates how to extend string and write your own heredoc formatter.&lt;/p&gt;

&lt;h2 id=&#34;my-own-bastardization&#34;&gt;My Own Bastardization&lt;/h2&gt;

&lt;p&gt;It feels like I should feel guilty whenever I even consider adding an extension to a core class. I don&amp;rsquo;t though. But, I will offer a caveat. Don&amp;rsquo;t go monkey patching carelessly! Be sure you&amp;rsquo;re not overwriting anything important, or you&amp;rsquo;ll be in a world of hurt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/monkeypatching-world-of-hurt.jpg&#34; alt=&#34;A world of hurt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I, for one, believe that monkey patching can be done in respectable ways.&lt;/p&gt;

&lt;p&gt;Enough with the warnings. Here&amp;rsquo;s the use case that got me thinking about it. Recently, I&amp;rsquo;ve been having frequent need to test the output of various CSVs. There are various ways to do this&amp;hellip; I could have fixtures, but that&amp;rsquo;s a lot of fixtures to manage. I could simply let the lines run on long, but that&amp;rsquo;s very difficult to read, and even more difficult to format. It&amp;rsquo;s a monkey patch for string that allows you to write in a clearer format, that allows you to respect line length limitations.&lt;/p&gt;

&lt;p&gt;Take a CSV for example, but, also imagine it&amp;rsquo;s much wider.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;first_name,last_name,favorite_hobby,favorite_color,favorite_food,favorite_kind_of_motorcycle
Cory,Logan,climbing,red,pizza,drz400
Paul,Baker,reading,blue,cheese,klr650
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we could just stuff it in a heredoc and call it done, but that leaves the line length too long to look at on one screen. If you&amp;rsquo;re running something like rubocop, you probably have a line length limit to contend with as well.&lt;/p&gt;

&lt;p&gt;So, here it is with a specially formatted heredoc, in which, two line breaks equal one. Allowing you to break lines, wherever, as long as you don&amp;rsquo;t need two.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;csv_string = &amp;lt;&amp;lt;-CSV.csv_doc
	first_name,last_name,favorite_hobby,favorite_color,
	favorite_food,favorite_kind_of_motorcycle

	Cory,Logan,climbing,red,pizza,drz400

	Paul,Baker,reading,blue,cheese,klr650
CSV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This formatting is all about being able to read it in the context of code or a test. In order to achieve this formatting, this is where the monkey patch comes in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class String
  def csvdoc
    stripped = strip_heredoc.gsub(/\n(?!\n)/, &#39;&#39;)
    &amp;quot;#{stripped}\n&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also inserts an extra empty line at the end of the string, to make it a valid CSV. This could be modified to many different cases. I&amp;rsquo;ve just been running into the CSV example a lot. And if you&amp;rsquo;re really not into monkey patching, you might consider implementing it as a standalone method that you pass a string to.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>